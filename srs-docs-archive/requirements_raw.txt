• Architecture Requirements
• The project will be developed for web-only at this time, however, additional channels such as mobile is and andriod may be added in a subsequent phase.
• The overall architecture consists of account-servicing web application, a cam application
• The account-servicing web application is a front-end application built using react and typescript. It allows allows users to securely service their accounts online
• The ciam application consists of ciam-ui and ciam-backend
• the clam-ui and ciam-backend applications implement the features and user navigations that are supported by the ciam-rest-api open api spec. This spec document is provided
• The cam application supports parallel login on different devices at the same time
• The cam application reuses the session across multiple tabs and browser windows of the same device and browser
• The cam application stores user identity information and access token in memory
• The cam application stores refresh token in a session cooke
• The account-servicing web application consists of Storefront page and Snapshot page
• The ciam-ui will facilitate integration with the account-servicing web application using a ciam-ui-sdk
• The ciam-ui-sok will facilitate the communication between the ciam-ui and ciam-backend
• The ciam-ui-sok integrates with CIAM backend to enable features like login, logout, token refresh, mfa.
• The ciam-ui-sdk provides the ciam-login-component
• The Storefront page is a non-secure route that can be accessed by a non-logged-in user. This is the front-door of the account-servicing web application
• The Storefront page displays the ciam-login-component in the upper right section of the navigation bar and a mocked company logo in the page body
• The Snapshot page is a secure route and can only be accessed by a logged-in user. This page will display customer account information.
• The Snapshot page displays the ciam-login-component in the upper right section of the navigation bar and the user's account balances in the page body. The user's account balances for the purpose of this project can be static content
• Requirements for ciam-ui-sdk
• The ciam-ui-sok should simplify integration of CIAM functionalities into existing applications by providing pre-built components and functions.
• The ciam-ui-sdk can be used with react based front-end applications such as the account-servicing web application to add cam functionality
• The ciam-ui-sdk's aim is to maximize encapsulation by providing necessary i components, handing navigation and page transitions, handling user interactions, session management, for cam functionality
• The ciam-ui-sok makes the entire login flow including MFA implementation seamless for the account-servicing web application
• The ciam-ui-sdk enables seamless session verification and token refresh for user actions on the website
• If user accesses the url of the Storefront page of the account-servicing web application, the integrated ciam-ui-sk automatically checks if the user is logged-in
• If user accesses the url of the Snapshot page of the account-servicing web application, the integrated ciam-ui-sdk automatically checks if the user is logged-in
• If the ciam-ui-sdk determines that the user is not logged-in and the user was accessing the url of the Storefront page, the user is taken to the Storefront page with the ciam-login-component displaying the non- logged-in experience o If the ciam-ui-sdk determines that the user is not logged-in and the user was accessing the url of the Snapshot page, the user is taken to the CIAM Login page with the ciam-login-component displaying the non-logged-in experience
• If the ciam-ui-sok determines that the user is already logged-in, and the user was accessing the url of the Storefront page, the user is directly redirected to the Storefront page with the ciam-login-component displaying the logged-
in experience
• If the ciam-ui-sok determines that the user is already logged-in, and the user was accessing the url of the Snapshot page, the user is redirected to the Snapshot page with the ciam-login-component displaying the logged-in
experience
• The ciam-ui-sk makes the ciam-login-component available to the Storefront page, Snapshot page and the CIAM Login page
• The ciam-login-component displays the username, password fields and the submit button for a non-logged-in experience
• The ciam-login-component displays the user's first name and last name and the logout button for the logged-in experience
• When the user enters their username and password, and clicks on the submit button the cam backend application performs user authentication.
• When the user clicks on the logout button, the cam backend application logs out the user and issued token are invalidated
• Requirements for the CIAM Login page
• If user accesses the url of the CIAM Login page, the integrated ciam-ui-sk automatically checks if the user is logged-in first.
• If the ciam-ui-sk determines that the user is not logged-in and the user was accessing the url of the CIAM Login page, the user is taken to the CIAM Login page
• If the ciam-ui-sok determines that the user is already logged-in and the user was accessing the url of the ClAM Login page, the user is taken to the Snapshot page with the ciam-login-component displaying the logged-in experience
• Requirements for Login and Navigation
• The user login process includes credential verification and may include MFA using OT or Push Notification.
• A Transmit API DRS response determines if MA is reguried.
• The ciam-ui-sok integrates with Transmit Security DRS UI SD to get and action token. The ciam-ui-sk sends this action token to the ciam-rest-api. This action token is used by the ciam-rest-api to get the device fingerprint and recommendation using Transmit DRS API to determine if the user requires MFA. For this project, we can mock response for Transmit DRS UI and backend API o The user session and token is refreshed when the user interacts with other areas of the logged-in experience
• Project Structure Requirements
• The Storefront page is owned bI the account-servicing web application team
• The Snapshot page is owned by the account-servicing web application
• The ciam-ui-sdk is owned by the cam team
• The ciam-login-component is owned by the ciam team
• The CIAM Login page is owned by the ciam team
• There needs to be clear gitlab project separation between the account-servicing web application, ciam-ui sdk and ciam-backend and the ciam-rest-api to ensure decoupled development and easier maintenance by their respective
development teams.
• Project Setup Requirements
• gitlab will be used for code repository
• The cam application is suite of decoupled and individually managed project repositories that separate code of the web application from cam related code
• the ciam ui, cam backend and ciam api.
• The cam application is to be built as a service that is available for integration by clients such as the web servicing application
• The ciam-ui's architecture should aim to be decoupled and work as plug-and-play requiring minimal work and code for the account-servicing web application team to implement cam functionality
• Infrastructure As Code Requirements
• The project will use Terraform for creating infrastructure on AWS
• Codegen Requirements
• Claude should make sure it will generate working code that integrates i with backend. All variables of the login process should be generated including login with mfa, without mfa, logout
• Claude should create techincal documentation to help developers userstand the code
• Claude should meet 100% code coverage requirement using Jest