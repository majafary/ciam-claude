# Software Requirements Specification (SRS)

**Project:** Customer Identity and Access Management (CIAM) Solution
**Version:** 1.0
**Date:** \[September 24, 2025]

---

## 1. Introduction

### 1.1 Purpose

The purpose of this project is to develop a **Customer Identity and Access Management (CIAM)** solution that integrates with an account-servicing web application. The CIAM system will handle secure authentication, session management, and multi-factor authentication (MFA) while enabling seamless integration with client-facing applications.

### 1.2 Scope

* Initial scope: **web-only** implementation.
* Future scope: Support for **iOS** and **Android**.
* Solution components:

  * **Account-servicing web application** (React + TypeScript).
  * **CIAM application** (ciam-ui, ciam-ui-sdk, ciam-backend, ciam-rest-api).

### 1.3 Definitions and Abbreviations

* **CIAM**: Customer Identity and Access Management.
* **ciam-ui**: UI layer enabling CIAM integration.
* **ciam-ui-sdk**: SDK providing pre-built CIAM components and session handling.
* **ciam-backend**: CIAM backend handling authentication, session, and tokens.
* **ciam-rest-api**: REST API defined via OpenAPI spec (provided separately).
* **MFA**: Multi-Factor Authentication.
* **DRS**: Device Risk Service (Transmit Security).

---

## 2. System Overview

The solution enables:

* User login/logout.
* MFA (OTP or push notification).
* Session and token management.
* Secure routing between logged-in and logged-out experiences.
* Simple SDK-based integration with client apps.

The system is **modular** with clear ownership and separation of repositories.

---

## 3. System Architecture

### 3.1 Components

1. **Account-servicing Web Application**

   * Built in React + TypeScript.
   * Provides Storefront (public) and Snapshot (secure) pages.

2. **CIAM Application**

   * **ciam-ui**: Facilitates front-end integration.
   * **ciam-ui-sdk**: Provides login component, handles navigation, sessions, MFA.
   * **ciam-backend**: Handles authentication, sessions, tokens.
   * **ciam-rest-api**: Implements flows defined in OpenAPI spec.

### 3.2 Session Management

* Supports **parallel login** across multiple devices.
* Reuses session across tabs/windows in the same browser.
* Stores:

  * Access token & identity info → memory.
  * Refresh token → session cookie.

---

## 4. Functional Requirements

### 4.1 Account-servicing Web Application

#### Storefront Page (Public Route)

* Accessible without login.
* Displays:

  * **ciam-login-component** in nav bar (top-right).
  * Company logo (mocked).
* Behavior:

  * If logged in → show logged-in state.
  * If not logged in → show login form.

#### Snapshot Page (Secure Route)

* Requires login.
* Displays:

  * **ciam-login-component** in nav bar (top-right).
  * **Static account balances** (mocked).
* Behavior:

  * If logged in → show balances.
  * If not logged in → redirect to CIAM Login Page.

#### CIAM Login Page

* If logged in → redirect to Snapshot Page.
* If not logged in → show login form.

---

### 4.2 CIAM-UI-SDK

* Provides plug-and-play CIAM integration for React apps.
* Key features:

  * **ciam-login-component**:

    * Logged-out → username/password fields + submit button.
    * Logged-in → user’s first/last name + logout button.
  * Manages session lifecycle (login, logout, token refresh).
  * Handles MFA flows.
  * Simplifies navigation between login states.

---

### 4.3 Authentication & MFA

* **Login Flow**:

  1. User enters username/password.
  2. **ciam-backend** verifies credentials.
  3. **Transmit DRS** evaluates risk:

     * Returns recommendation on MFA requirement.
     * (Mock responses acceptable for project).
  4. If MFA required → OTP or push notification flow triggered.
  5. Session established with access + refresh tokens.

* **Logout Flow**:

  * User clicks logout.
  * **ciam-backend** invalidates tokens.

* **Session Handling**:

  * Automatic session verification on navigation.
  * Automatic token refresh during user activity.

---

## 5. Non-Functional Requirements

### 5.1 Security

* Tokens stored in memory/session cookies only.
* MFA enforced based on DRS evaluation.

### 5.2 Performance

* Login response time < 2 seconds under normal load.
* Token refresh latency < 500 ms.
* SDK integration should add negligible overhead.

### 5.3 Maintainability

* Clear repository separation in GitLab:

  * Account-servicing web app.
  * ciam-ui-sdk.
  * ciam-backend.
  * ciam-rest-api.
* Modular architecture for independent team ownership.

### 5.4 Usability

* SDK must require minimal integration effort.
* Provide developer-friendly documentation.

---

## 6. Project Setup Requirements

* **Repository Management**: GitLab.
* **Infrastructure**: Terraform for AWS resource provisioning.
* **Code Generation**:

  * Claude to generate working flows for login/logout, with and without MFA.
* **Testing**:

  * 100% Jest test coverage required.
* **Documentation**:

  * Technical docs explaining SDK usage and integration steps.

---

## 7. Future Enhancements

* Support for iOS and Android.
* Real account balance integration (instead of static).
* Additional MFA methods (biometrics, email-based, etc.).

---

## 8. Appendix

* **ciam-rest-api OpenAPI spec** (separate document).
* **Transmit DRS mock responses** (claude should mock).